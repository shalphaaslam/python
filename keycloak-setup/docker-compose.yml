# this is working yaml for connecting to already exisiting timescaledb using env variables.
# Also, sharing docker common network [ilcs-cloud-backend-sample_backend ]where the timescaledb is present. ensure to test docker network ls and inspect to check two docker containers are in same network
version: "3.7"

services:

  # database:
  #   image: postgres:14
  #   environment:
  #     - POSTGRES_USER=keycloak
  #     - POSTGRES_DB=keycloak
  #     - POSTGRES_PASSWORD=keycloak
  #   volumes:
  #     - pg_data:/var/lib/postgresql/data
  #   restart: always
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U keycloak"]
  #     interval: 1s
  #     timeout: 5s
  #     retries: 5
  #   ports:
  #     - 5433:5433
  #   networks:
  #     - dev

  keycloakserver:
    image: quay.io/keycloak/keycloak:legacy
    # command: ["-Dkeycloak.migration.action=import", "-Dkeycloak.migration.provider=singleFile", "-Dkeycloak.migration.strategy=OVERWRITE_EXISTING", "-Dkeycloak.migration.file=/opt/keycloak/data/import/realmsetting.json"]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: ilcs-cloud-db #172.29.0.1
      DB_DATABASE: wicloud
      DB_USER: wicloud
      DB_SCHEMA: keycloak
      DB_PASSWORD: 4rts2-fgbtr-asvrs-4663g
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_LOGLEVEL: DEBUG
      # JAVA_OPTS_APPEND: "-Dquarkus.transaction-manager.enable-recovery=true"
      # KEYCLOAK_FRONTEND_URL: http://localhost:8080/auth
    ports:
      - 8080:8080
    # depends_on:
    #   - database
    volumes:
      - ./keycloak-data:/opt/keycloak/data/import
    networks:
      - ilcs-cloud-backend-sample_backend


# volumes:
#   pg_data:

networks:
  ilcs-cloud-backend-sample_backend:
    external: true
